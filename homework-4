module BCD(clk, rst);
input clk; //I clock in
input rst; //I asyn reset
output [3:0] Q_out; // O asyn Result
reg [3:0] Q_out;

initial begin
    Q_out = 4'b0000;    
end

always@ (posedge clk or posedge rst)
begin
    if (rst)
        Q_out = 0;
    else if (Q_out == 9)
        Q_out = 0;
    else
        Q_out++;
end
endmodule
```=
`timescale 1ns/1ps
module BCD_tb;
reg clk_tb;
reg rst_tb;

initial begin
    clk_tb = 0;
    rst_tb = 0;
end

// clock process
always begin
    #10 clk_tb = ~clk_tb;
end

initial begin
    #20 rst_tb = 1'b0;
    #5 rst_tb = 1'b1;
    #10 rst_tb = 1'b0;
    #300 $finish;
end

initial begin
    $dumpfile("BCD.vcd");
    $dumpvars(0, BCD_tb);
end

BCD BCD_tb (
    .clk(clk_tb),
    .rst(rst_tb)
    );    
endmodule 
```
